Damien Ha
UID #: 905539967

	After testing some reasonable inputs in the program, I started inputting values that didn't sum up correctly. For example, 100 total Electoral College electors but 40 Republican votes and 50 Democrat votes so that the sum was less than the total, or 10 electors but 20 Republican votes and 25 Democrat votes so that the sum was greater than the total. In these cases, the program outputted the correct percentages and winners based off the given inputs and the message telling the user that some of the values did not make sense, as expected. Next I started using 0s as inputs to see what would happen. In the case that one party got all the votes(an assuming no mathematical error), e.g. total Electoral College electors is 10 with 0 Republican votes and 10 Democrat votes, the program ran correctly. If I inputted the total number of electors as 0, then the program began to give an interesting output. With 0 total electors, 2 Republican voters and 1 Democrat voter, the program outputted that "inf% of the 0 electors voted for the Republican party candidate" and "inf% of the 0 electors voted for the Democratic party candidate". The program still outputted the error message informing the user that some of the values did not make sense as expected, but the "inf%" seems like an unusual result. With all inputs as 0, i.e. 0 total electors and 0 Republican and 0 Democratic votes, the program outputted "nan% of the 0 electors voted for the Republican party candidate" and "nan% of the 0 electors voted for the Democratic party candidate". While perhaps making some sense, the nan value may be confusing to users. 

The results of the program seem even more nonsensical with the introduction of negative integers as inputs. If the math of the negative inputs worked out correctly such that the total electors equaled the sum of Democrats and Republicans, the error message was not outputted and the program simply executed with the inputted values. For example -1 electoral college electors, -3 Republican votes and 2 Democratic votes results in 300% for the Republican candidate and -200% for the Democratic candidate with the Republican candidate declared the winner. This is utter nonsense; while the percentage calculations for each party might be correctly calculated mathematically, there's no logic to this scenario, and the declared party winner has negative votes. Similarly, when I inputted 10 total electors, -5 Republicans and 15 Democrats, the program calculated -50% of the votes for Republicans and 150% for Democrats, and declared Democrats as the winner. In this case the Democratic candidate did win and the percentages did add to 100%, but this result made no sense and the program should've outputted an error message in this case. If the negative values don't correctly sum then the error message is printed to the screen: -1 electors, -2 Republicans and -3 Democrats results in 200% electors for the Republican candidate, 300% for the Democrat, the Democratic candidate declared as the winner and the error message saying the values did not make sense. In this final case the program properly recognized illogical input because it did not make sense mathematically. However, the first two cases also should have been seen as an error, as negative votes do not really make sense unless the user somehow takes into account lost ballots, voter fraud, or something else of the like.

	In logic_error.cpp, the error I introduced came from the removal of the division by total number of voters in the calculation of the percentage of electors for the Democratic candidate (I used `double pctDemoc = ( 100.0 * democraticVotes );` instead of `double pctDemoc = ( 100.0 * democraticVotes ) / totalVoters;`). The program will still build in this case, but it will produce illogical results from reasonable input due to the mathematical error. The percentage of Democratic voters is now several higher and for reasonable inputs will almost always win. For example, with 100 total Electoral College electors, 70 votes for the Republican candidate and 30 votes for the Democratic candidate, the program calculates the Democratic candidate as having 3000% of the votes and being the winner due to the higher percentage when in reality, they lost. The program does not output the error message because the error message is based only on if the total number of votes sums correctly and has nothing to do with the percentage. Similarly, if there are 10 total electors with 5 votes for each party, Republicans have 50% of the votes while Democrats have 500% are declared the winners without and error message despite the result being a tie. Even in cases where the Democratic candidate does have the majority, like 5 total electors, 2 for Republicans and 3 for Democrats, the program gives the wrong percentage of Democrats with 300% in contrast to 40% Republicans, despite correctly declaring the Democratic candidate as the winner.

	In compile_error.cpp, I removed a semicolon after declaring the integer variable totalVoters (i.e. I used `int totalVoters` instead of `int totalVoters;`), and I removed the closing bracket (`}`) that immediately follows `return(0);` at the end of the code. Even before attempting to run the code, XCode gives these warnings: 'Expected ';' at end of declaration' and 'Expected '}''. If I attempt to run this code, it games me a message saying "Build Failed | Today at (the time of day)" with the semicolon and bracket errors specified as "2 issues" on the right side of the screen.



